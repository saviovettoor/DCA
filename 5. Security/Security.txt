#Security
● Describe the process of signing an image
	- To sign a Docker Image you will need a delegation key pair. These keys can be generated locally using "$docker trust key generate", generated by a certificate authority, or if you are using Docker Enterprise’s Universal Control Plane (UCP).
	- Once the keys have been imported an image can be pushed with the $ docker push command, by exporting the DCT environmental variable.
● Demonstrate that an image passes a security scan
	https://docs.docker.com/datacenter/dtr/2.5/guides/admin/configure/set-up-vulnerability-scans/
● Enable Docker Content Trust
	By default, when you push an image to DTR, the Docker CLI client doesn’t sign the image.
	You can configure the Docker CLI client to sign the images you push to DTR. This allows whoever pulls your image to validate if they are getting the image you created, or a forged one.
	To sign an image, you can run:
		export DOCKER_CONTENT_TRUST=1
	Mutual Transport Layer Security, or MTLS, is used to secure communications between the manager and nodes in a Docker Swarm cluster.
	In an environment where DOCKER_CONTENT_TRUST is set, you can use the --disable-content-trust flag to run individual operations on tagged images without content trust on an as-needed basis.
● Configure RBAC in UCP
	https://blog.docker.com/2016/03/role-based-access-control-docker-ucp-tutorial/
	Levels of Permissions
		Full Control: Can do anything possible to resources. Create, restart, kill, view containers, etc. This is the highest level of access a non-admin user can have.
		Restricted Control: Similar to Full Control, but with restrictions around container exec, privileged containers, host-mounted volumes, and other particularly sensitive operations. This is best suited for when you want a group to run containers in production but not access kernel capabilities or modify a container using exec privileges.
		View Only: Look, but don’t touch. Can view and inspect resources, but nothing else.
		No Access: Cannot view or otherwise access resources.
		Every user has a default permissions setting which is assigned at account creation, and can be edited by an admin at any time. The default permissions are enforced for all non-container resources such as images, networks, and volumes.
● Integrate UCP with LDAP/AD	
	https://docs.docker.com/datacenter/ucp/2.2/guides/admin/configure/external-auth/
● Demonstrate creation of UCP client bundles
	UCP Console ->  My Profile -> In the left pane, click "Client Bundles" ->  "New Client Bundle" to download the certificate bundle.
	https://blog.docker.com/2017/09/get-familiar-docker-enterprise-edition-client-bundles/
● Describe default engine security
	You can configure Docker’s trust features so that your users can push and pull trusted images.
	You can protect the Docker daemon socket and ensure only trusted Docker client connections. 
	You can use certificate-based client-server authentication to verify a Docker daemon has the rights to access images on a registry.
	Namespaces provide the first and most straightforward form of isolation: processes running within a container cannot see, and even less affect, processes running in another container, or in the host system
	Control groups: Control Groups are another key component of Linux Containers. They implement resource accounting and limiting. They provide many useful metrics, but they also help ensure that each container gets its fair share of memory, CPU, disk I/O; and, more importantly, that a single container cannot bring the system down by exhausting one of those resources.
● Describe swarm default security
	The swarm mode public key infrastructure (PKI) system built into Docker makes it simple to securely deploy a container orchestration system. 
	The nodes in a swarm use mutual Transport Layer Security (TLS) to authenticate, authorize, and encrypt the communications with other nodes in the swarm.
	https://docs.docker.com/engine/swarm/how-swarm-mode-works/pki/
● Describe MTLS(Mutually Authenticated TLS )
	- Mutually Authenticated TLS is the implementation that was chosen to secure that communication. Any time a swarm is initialized, a self-signed Certificate Authority (CA) is generated and issues certificates to every node (manager or worker) to facilitate those secure communications.
	- Using TLS (Transport Layer Security) provides both privacy and data integrity in communications within the swarm.
	https://diogomonica.com/2017/01/11/hitless-tls-certificate-rotation-in-go/
● Identity roles
	UCP administrators view and manage roles by navigating to the Roles page.
	The system provides the following default roles:
	- None	The user has no access to swarm resources. This maps to the No Access role in UCP 2.1.x.
	- View Only	The user can view resources like services, volumes, and networks but can’t create them.
	- Restricted Control	The user can view and edit volumes, networks, and images but can’t run a service or container in a way that might affect the node where it’s running. The user can’t mount a node directory and can’t exec into containers. Also, The user can’t run containers in privileged mode or with additional kernel capabilities.
	- Scheduler	The user can view nodes and schedule workloads on them. Worker nodes and manager nodes are affected by Scheduler grants. Having Scheduler access doesn’t allow the user to view workloads on these nodes. They need the appropriate resource permissions, like Container View. By default, all users get a grant with the Scheduler role against the /Shared collection.
	- Full Control	The user can view and edit volumes, networks, and images. They can create containers without any restriction, but can’t see other users’ containers.
	https://docs.docker.com/datacenter/ucp/2.2/guides/access-control/permission-levels/#roles
● Describe the difference between UCP workers and managers
	UCP components in manager nodes
	 - ucp-agent: Monitors the node and ensures the right UCP services are running
	 - ucp-reconcile:	When ucp-agent detects that the node is not running the right UCP components, it starts the ucp-reconcile container to converge the node to its desired state. It is expected for the ucp-reconcile container to remain in an exited state when the node is healthy.
	 - ucp-auth-api: The centralized service for identity and authentication used by UCP and DTR
	 - ucp-auth-store:	Stores authentication configurations and data for users, organizations, and teams
	 - ucp-auth-worker:	Performs scheduled LDAP synchronizations and cleans authentication and authorization data
	 - ucp-client-root-ca:	A certificate authority to sign client bundles
	 - ucp-cluster-root-ca:	A certificate authority used for TLS communication between UCP components
	 - ucp-controller: The UCP web server
	 - ucp-dsinfo: Docker system information collection script to assist with troubleshooting
	 - ucp-kv: Used to store the UCP configurations. Don’t use it in your applications, since it’s for internal use only
	 - ucp-metrics: Used to collect and process metrics for a node, like the disk space available
	 - ucp-proxy: A TLS proxy. It allows secure access to the local Docker Engine to UCP components
	 - ucp-swarm-manager: Used to provide backwards-compatibility with Docker Swarm 
	UCP components in worker nodes
	 - ucp-agent: Monitors the node and ensures the right UCP services are running
	 - ucp-dsinfo: Docker system information collection script to assist with troubleshooting
	 - ucp-reconcile: When ucp-agent detects that the node is not running the right UCP components, it starts the ucp-reconcile container to converge the node to its desired state. It is expected for the ucp-reconcile container to remain in an exited state when the node is healthy.
	 - ucp-proxy: A TLS proxy. It allows secure access to the local Docker Engine to UCP components
● Describe process to use external certificates with UCP and DTR
	https://docs.docker.com/datacenter/ucp/2.2/guides/admin/configure/use-your-own-tls-certificates/
	https://docs.docker.com/datacenter/dtr/2.3/guides/admin/configure/use-your-own-tls-certificates/
	
NOTES:
Linux security technologies
	Namespaces
		They let us slice up an operating system (OS) so that it looks and feels like multiple isolated operating systems.
		eg: You can run multiple web servers, each requiring port 443, on a single OS. To do this you just run each web server app inside of its own network namespace. This works because each network namespace gets its own IP address and full range of ports.
		
		You can run multiple applications, each requiring their own particular version of a shared library or configuration file. To do this you run each application inside of its own mount namespace. This works because each mount namespace can have its own isolated copy of any directory on the system (e.g. /etc, /var, /dev etc.)
		- Docker on Linux currently utilizes the following kernel namespaces:
			Process ID (pid): Docker uses the pid namespace to provide isolated process trees for each container. Every container gets its own process tree meaning that every container can have its own PID 1.
			Network (net):  every container gets its own eth0 interface with its own unique IP and range of ports.
			Filesystem/mount (mnt):  Every container gets its own unique isolated root / filesystem.
			Inter-process Communication (ipc): Docker uses the ipc namespace for shared memory access within a container.
			User (user):
			UTS (uts): Docker uses the uts namespace to provide each container with its own hostname.
	Control Groups
		Cgroups let us set limits on each of these so that a single container cannot use all of the CPU, RAM, or storage I/O of the Linux host.
	Capabilities
		we need is a technology that lets us pick and choose which root powers our containers need in order to run.
		Linux root account is made up of a long list of capabilities:
			CAP_CHOWN - lets you change file ownership.
			CAP_NET_BIND_SERVICE - lets you bind a socket to low numbered networkports.
			CAP_SETUID - lets you elevate the privilege level of a process.
			CAP_SYS_BOOT - lets you reboot the system.
	Mandatory Access Control
		Docker works with major Linux MAC technologies such as AppArmor and SELinux.
	seccomp
		Docker uses seccomp, in filter mode, to limit the syscalls a container can make to the host’s kernel.
Docker platform security technologies
	Swarm Mode
	Docker Security Scanning
	Docker Content Trust
	Docker secrets
Update the certificate rotation period to 30 days.
	docker swarm update --cert-expiry 720h
Manage sensitive data with Docker secrets
	#Create a secret from a STDIN
		printf <secret> | docker secret create my_secret -
	#Create a secret from a file
		docker secret create my_secret secret.txt
	#List out the secrets
		docker secret ls
	#Create a secret with labels
		docker secret create --label env=dev --label rev=20170324 my_secret ./secret.json
	#Filter using label
		docker service ls --filter label=env=dev
	#Display detailed information on one or more secrets
		docker secret inspect my_secret
	#Remove one or more secrets
		docker secret rm my_secret
	#Using secret in service
		docker service create --name redis --secret my_secret_data redis:alpine
	#Remove access to the secret from the running redis service by updating the service.
		docker service update --secret-rm my_secret_data redis
	#Update service with new secret
		docker service update --secret-add source=ssh-2,target=ssh-2 --secret-rm ssh-1 myservice	
	Secret location in container
		/run/secret/<secret-name>
	NOTE: You cannot update or rename a secret, but you can revoke a secret and grant access to it using a new target filename. 
	Internally, swarm services use tmpfs mounts to mount secrets into a service’s containers.
	
How to create Docker Content Trust
--------------------
Creating Delegation Key:
	docker trust key generate [NAME]
Importing a Key:
	docker trust key load [PEM] --name [NAME]
Add a signer:
	docker trust signer add --key [PEM] [NAME] [REPOSITORY]
Remove a signer:
	docker trust signer remove [NAME] [REPOSITORY]
Signing an image:
	docker trust sign [IMAGE]:[TAG]
Check the image on content trust
	docker trust inspect <image-name> 

#Image Creation, Management, and Registry

Content may include the following:
● Describe Dockerfile options [add, copy, volumes, expose, entrypoint, etc)
	FROM -> base image from docker hub or a tarfile, which should be the first statement
	LABEL/MAINTAINER -> who maintaine the image
	COPY - Work only with files and Folder
		If <src> is a directory, the entire contents of the directory are copied, including filesystem metadata.Note: The directory itself is not copied, just its contents.
	ADD - Work with files, Folders and URLS
		If you build by passing a Dockerfile through STDIN (docker build - < somefile), there is no build context, so the Dockerfile can only contain a URL based ADD instruction.
		If your URL files are protected using authentication, you will need to use RUN wget, RUN curl or use another tool from within the container as the ADD instruction does not support authentication.
		If <src> is a directory, the entire contents of the directory are copied, including filesystem metadata.Note: The directory itself is not copied, just its contents.
	VOLUME -> Create a mount point
	RUN -> run a command in root privilage
	ENV -> Setting an enviroment variable, which will be system wide enviroment variable. 
	ARG -> Only the one which can come before FROM but then arg value can be used only by FROM.
		The ARG instruction defines a variable that users can pass at build-time to the builder with the docker build command using the --build-arg <varname>=<value> flag.
		Predefined ARGs
			HTTP_PROXY
			http_proxy
			HTTPS_PROXY
			https_proxy
			FTP_PROXY
			ftp_proxy
			NO_PROXY
			no_proxy
	EXPOSE - expose a port.protocol can be UDP or TCP associated with the indicated port, default is TCP with no specification. EXPOSE 80/udp
	USER - To specfyig an entry point user, what all command specfyig after this will be executed as the USER which you specfy and what all above that will be run as privilage user.
	CMD - Only run when the container is created(not start/restart), can be override CMD by passing value when you run a container.
		  There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect.
		  If CMD is used to provide default arguments for the ENTRYPOINT instruction, both the CMD and ENTRYPOINT instructions should be specified with the JSON array format.
		  The CMD instruction has three forms:
			CMD ["executable","param1","param2"] (exec form, this is the preferred form)
			CMD ["param1","param2"] (as default parameters to ENTRYPOINT)
			CMD command param1 param2 (shell form)
		The main purpose of a CMD is to provide defaults for an executing container.
	ENTRYPOINT - configures a container that will run as an executable.
	HEALTHCHECK - HEALTHCHECK [OPTIONS] CMD command (check container health by running a command inside the container).
			HEALTHCHECK --interval=5s --timeout=3s --retries=3 CMD curl -f http://localhost:8080/ || exit 1
			The options that can appear before CMD are:
				--interval=DURATION (default: 30s)
				--timeout=DURATION (default: 30s)
				--start-period=DURATION (default: 0s)
				--retries=N (default: 3)
			HEALTHCHECK NONE (disable any healthcheck inherited from the base image)
			0: success - the container is healthy and ready for use
			1: unhealthy - the container is not working correctly
			2: reserved - do not use this exit code
	WORKDIR  - The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD.
	ONBUILD - The ONBUILD instruction adds to the image a trigger instruction to be executed at a later time, when the image is used as the base for another build.
			  The ONBUILD instruction may not trigger FROM or MAINTAINER instructions.
	STOPSIGNAL - The STOPSIGNAL instruction sets the system call signal that will be sent to the container to exit.
	Dockerfile should specify at least one of CMD or ENTRYPOINT commands.
● Give examples on how to create an efficient image via a Dockerfile
	“ephemeral”- mean that the container can be stopped and destroyed, then rebuilt and replaced with an absolute minimum set up and configuration.
	build context
	Minimize the number of layers
● Use CLI commands such as list, delete, prune, rmi, etc to manage images
	#listout docker images
		docker images
		docker image ls
	# To view intermediate image
		docker image ls -a
	#Pretty-print the containers’ IDs, names and statuses in tabular form
		docker container ls --format "table {{.ID}}\t{{.Names}}"
	#Pull an image
		docker image pull nginx
	#display image with details long image ID
		docker image ls --digests
			The "digest" is a hash of the manifest, introduced in Docker registry v2.
	#display image with details long image ID
		docker image ls --no-trunc
			The image ID is a hash of the local image JSON configuration.
	#Remove an image
		docker image rm <ImageID>
	#Remove all stoped container images
		docker container rm `docker ps -a -q`
	#Remove an image even if there are containers based on it
		docker image rmi --force <ImageID/ImageName>
	#Allows the container to be renamed
		docker comtainer rename <container-name> <container-new-name>
	#Filtering image list
		docker image ls --filter "before=nginx"		#Will list images which created before nginx image 
	#List all dangling images
		docker image ls --filter "dangling=true"
	PRUNE
		#Remove all stopped containers,networks not used by at least one container,  dangling images and  build cache.
			docker system prune
		#-a Remove all unused images not just dangling ones
			docker system prune -a 
		#Prune volumes
			docker system prune -a --volumes 
		#Note - This wont clear anything of docker swarm.
● Inspect images and report specific attributes using filter and format
	#Display detailed information on one or more images
		docker image inspect <IMAGEID/NAME>
	#Using filter in inspect
		docker image inspect --format="{{.Metadata}}" centos
		docker image inspect -f="{{.Metadata}}" centos
		docker image inspect centos --format="{{json .GraphDriver}}"
	#Format the image list output
		docker image ls --format "{{.ID}}: {{.Repository}}"
	Placeholder		Description
	  .ID			Image ID
	  .Repository	Image repository
	  .Tag			Image tag
	  .Digest		Image digest
	  .CreatedSince	Elapsed time since the image was created
	  .CreatedAt	Time when the image was created
	  .Size			Image disk size
● Demonstrate tagging an image
	#taging centos:6 to mycentos:v1
		docker image tag centos:6 mycentos:v1  or  docker tag centos:6 mycentos:v1 
		#centos:6 to mycentos:v1 both will have same image ID
		#when you remove centos:6 which wont remove mycentos:v1 or the base image it will just untag the image
	#Untag a docker image
		docker image rm mycentos:v1 or docker rmi mycentos:v1
● Utilize a registry to store an image
	#Push an image or a repository to a registry
		docker image push <ImageName>
	#Skip image signing
		docker image push --disable-content-trust=true <ImageName>
	#Push to s
● Display layers of a Docker image
	#Show the history of an image
		docker image history [OPTIONS] IMAGE
		docker image history --no-trunc <IMAGE>
		docker image history --quiet <IMAGE>
		docker image history --quiet --no-trunc <IMAGE>
● Apply a file to create a Docker image
	When we build an image it checks all existing files in current directory and copy all content to Docker daemon at path /var/lib/docker/tmp/docker-builderXXX directory where xxx is build number. Once the miage is created the files in the tmp folder will be get deleted.
	#Build using Dockerfile in current directory
		docker image build -t myimage:v1 .
		If you build an image without -t option then the image name and tage name will be <none>.
	#Building using git 
		docker image build -t myimage:v1 https://github.com/madflojo/automatron.git
	#Build docker image using Dockerfile2 in current directory
		docker build -t mycustomeimage:v2 -f Dockerfile2 .							
	#Passing an argument to dockerfile
		FROM node
		LABEL org.label-schema.version=v1.1
		ARG SRC_DIR=/var/code #/var/code as default value

		RUN mkdir -p $SRC_DIR
		ADD src/ $SRC_DIR
		WORKDIR $SRC_DIR
		RUN npm install
		EXPOSE 3000
		CMD ./bin/www
			docker image build -t linuxacademy/weather-app:v3 --build-arg SRC_DIR=/var/code . -->  by ($SRC_DIR)
	#Building image by piping the Dockerfile through STDIN:
		docker image build -t linuxacademy/nginx:stind --rm -<<EOF
		FROM nginx:latest
		VOLUME ["/usr/share/nginx/html/"]
		EOF
	#Building an image using a URL:
		docker image build -t linuxacademy/weather-app:github https://github.com/linuxacademy/content-weather-app.git#remote-build
	#Building an image from a zip file:
		docker image build --tag <NAME>:<TAG> - < myapp.tar.gz

● Modify an image to a single layer
	#create image with single layer(--squash) *you need to enable experiment feature in docker deamon.# --no-cache  dont use image in local
		docker build --pull --no-cache --squash -t mysquashedimage:v1 .
	#Export an image
		docker image save <IMAGE> > <FILE>.tar # tar will contain manifest.json, repositories
		docker image save <IMAGE> -o <FILE>.tar
		docker image save <IMAGE> --output <FILE>.tar
	#export a container
		docker container export <container_name> > my_exported_container.tar 
		docker image import my_exported_container.tar myimage:v2 #importing an exported container if tag name is not given name and tag will be <None>
			or
		docker image load < <FILE>.tar 			## docker image load, will import image in a streen way. Orginal name will be name and tag 
		docker image load -i <FILE>.tar
		docker image load --input <FILE>.tar
● Describe how image layers work
	#To view a running container size
		docker ps -s
	NOTE:
		The <missing> lines in the docker history output indicate that those layers were built on another system and are not available locally.
		The major difference between a container and an image is the top of container there is writable layer.
		More-https://medium.com/@jessgreb01/digging-into-docker-layers-c22f948ed612
● Deploy a registry (not architect)
		yum install openssl
		mkdir /opt/certs
		mkdir /opt/auth
		
		openssl req -newkey rsa:4096 -nodes -sha256 -keyout /opt/certs/dockerrepo.key -x509 -days 365 -out /opt/certs/dockerrepo.crt -subj /CN=myregistrydomain.com
		mkdir /etc/certs.d/myregistrydomain:5000
		cp /opt/certs/dockerrepo.crt /etc/certs.d/myregistrydomain:5000/ca.crt #To make certificate is trusted
		docker pull registry:2
		docker run --entrypoint htpasswd registry:2 -Bbn test password@123 > /opt/auth/htpasswd
		docker run -d -p 5000:5000 -v /opt/certs:/certs -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/dockerrepo.crt -e REGISTRY_HTTP_TLS_KEY=/certs/dockerrepo.key -v /opt/auth:/auth -e REGISTRY_AUTH=htpasswd -e REGISTRY_AUTH_HTPASSWD_REALM="Registry Realm" -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd -e REGISTRY_LOG_LEVEL=debug registry:2
		
		ON 443
		docker run -d -p 443:443 --restart=always --name registry -v /home/cloud_user/registry/certs:/certs -v /home/cloud_user/registry/auth:/auth -e REGISTRY_HTTP_ADDR=0.0.0.0:443  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key -e REGISTRY_AUTH=htpasswd -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd registry:2
		
● Configure a registry
	Create a new configuration file from scratch,named config.yml, then specify it in the docker run command:
		docker run -d -p 5000:5000 --restart=always --name registry -v `pwd`/config.yml:/etc/docker/registry/config.yml registry:2
	MORE - https://docs.docker.com/registry/configuration/
● Log into a registry
	#Login
		docker login [OPTIONS] [SERVER]
	#Login to a self-hosted registry
		docker login myregistry:8080 -u savio -p password@123
	#Provide a password using STDIN
		cat ~/my_password.txt | docker login --username foo --password-stdin
	#Create service pulling image from private Registry 
		docker service  create --with-registry-auth --name my_service registry.example.com/test:latest
● Utilize search in a registry
	#Search apache image in docker hub and list out
		docker search apache
	#Search apache image in docker hub and list out
		docker search apache
	#Search apache image in docker hub and list out with 50=> star
		docker search --filter stars=50 apache
	#Search apache image in docker hub and list out with 50+ star amd official image
		docker search --filter stars=50 --filter is-official=true apache
	#limit display of 10 images	(by default 25)
		docker search  --limit 10 apache
● Sign an image in a registry
	Docker Content Trust (DCT) 
	#Enable Docker content trust then untrusted certificate authority wont work 
		export DOCKER_CONTENT_TRUST=1
● Pull an image from a registry
	#which wil pull latest taged image which is default
		docker pull hello-world
	#Pull all taged images
		docker pull -a hello-world 
	#Pull down a non-trusted image by docker registry
		docker pull --disabled-content-trust hello-world 
	#Pulling a specific is tag image (cnetos6)
		docker pull centos:6
● Describe how image deletion works
	#Remove all running docker container
		docker rm -f $(docker ps -qf status=running)
	#Remove all stoped container images
		docker rm `docker ps -a -q`
	#Delete all Docker Images
		docker rmi $(docker image ls -q) or docker image rm $(docker image ls -q) 
	Docker’s intermediate images maintenance. These are the “<none> <none>” images located in docker images -a 
	docker images. These are the “<none> <none>” ,You can use docker rmi $(docker images -f “dangling=true" -q) or docker images prune to clean these up.
● Delete an image from a registry
	You can use webconsole
● Container Lifecycles 
	docker container run -d --name <NAME> --restart <on-failure> <IMAGE>
	docker update --restart=on-failure:3 my-container
	no: Do not automatically restart the container. (the default)
	on-failure: Restart the container if it exits due to an error, which manifests as a non-zero exit code.
	always: Always restart the container if it stops then on next docker deamon restart the container will come up.
	unless-stopped: except that when the container is stopped, it is not restarted even after the Docker daemon restarts.
● Container Stat
	docker container top <Container_NAME>
	docker container stats <Container_NAME> 	#live streening of stat
	docker container stats 		#show stat of all container
● docker events
	docker system events
	docker system events --since "1h"
	docker system events --filter type=container --since '1h'
	docker system events --filter type=container --filter event=start --filter event=stop --filter event=die --filter event=attach
	docker system df #hardisk usage
	docker system df -v # container wise disk usage.
● Build Enhancements for Docker
	By integrating BuildKit, users should see an improvement on performance, storage management, feature functionality, and security.
	BuildKit mode is incompatible with UCP and Swarm Classic
	Only supported for building Linux containers
	#Enable buildkit builds
		DOCKER_BUILDKIT=1 docker build .
		
			or
		/etc/docker/daemon.json
			{ "features": { "buildkit": true } }

	X509: CERTIFICATE SIGNED BY UNKNOWN AUTHORITY
		If you are fetching images from insecure registry (with self-signed certificates) and/or using such a registry as a mirror, you are facing a known issue in Docker 18.09
● Multi-stage builds
	With multi-stage builds, you use multiple FROM statements in your Dockerfile.
	Each FROM instruction can use a different base, and each of them begins a new stage of the build. You can selectively copy artifacts from one stage to another, leaving behind everything you don’t want in the final image.
	````
	FROM golang:1.7.3
	WORKDIR /go/src/github.com/alexellis/href-counter/
	RUN go get -d -v golang.org/x/net/html  
	COPY app.go .
	RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

	FROM alpine:latest  
	RUN apk --no-cache add ca-certificates
	WORKDIR /root/
	COPY --from=0 /go/src/github.com/alexellis/href-counter/app .
	CMD ["./app"] 
	````
	The COPY --from=0 line copies just the built artifact from the previous stage into this new stage.
	
	#Name your build stages
		By default, the stages are not named, and you refer to them by their integer number, starting with 0 for the first FROM instruction.
		you can name your stages, by adding an AS <NAME> to the FROM instruction.
	-----
	FROM golang:1.7.3 AS builder
	WORKDIR /go/src/github.com/alexellis/href-counter/
	RUN go get -d -v golang.org/x/net/html  
	COPY app.go    .
	RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

	FROM alpine:latest  
	RUN apk --no-cache add ca-certificates
	WORKDIR /root/
	COPY --from=builder /go/src/github.com/alexellis/href-counter/app .
	CMD ["./app"]
	-----
	When you build your image, you don’t necessarily need to build the entire Dockerfile including every stage. You can specify a target build stage. The following command assumes you are using the previous Dockerfile but stops at the stage named builder:
		docker build --target builder -t alexellis2/href-counter:latest .
	You are not limited to copying from stages you created earlier in your Dockerfile. You can use the COPY --from instruction to copy from a separate image, either using the local image name, a tag available locally or on a Docker registry, or a tag ID.
		COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf
● .dockerignore file
	Before the docker CLI sends the context to the docker daemon, it looks for a file named .dockerignore in the root directory of the context. If this file exists, the CLI modifies the context to exclude files and directories that match patterns in it.
	Lines starting with ! (exclamation mark) can be used to make exceptions to exclusions. The following is an example .dockerignore file that uses this mechanism:
		*.md
		!README.md
Keep containers alive during daemon downtime
	By default, when the Docker daemon terminates, it shuts down running containers. Starting with Docker Engine 1.12, you can configure the daemon so that containers remain running if the daemon becomes unavailable. This functionality is called live restore. The live restore option helps reduce container downtime due to daemon crashes, planned outages, or upgrades.
	Using --live-restore allows you to keep your containers running during a Docker upgrade, though networking and user input are interrupted and even
	docker daemon is down.
	or 
	daemon.json
		{
			"live-restore": true
		}
NOTE:
	--oom-kill-disable :- Will disable the OOM exception.
